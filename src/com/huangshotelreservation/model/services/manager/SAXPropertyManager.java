package com.huangshotelreservation.model.services.manager;

/**
 *
 * @author JayHu
 */

import com.huangshotelreservation.model.business.exception.PropertyFileNotFoundException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.util.Properties;
import java.util.logging.Level;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.apache.log4j.Logger;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;

public class SAXPropertyManager extends DefaultHandler{

    static Logger log = Logger.getLogger("com.huangshotelreservation.model."
            + "services.manager");
    
    /** Holds all property values*/
    private static Properties properties;
    
    /**Captures each element content*/
    private StringBuffer buffer;
    
    /**holds interface class*/
    private String interfaceClass;
    
    /**holds implementation class*/
    private String implementationClass;
    
    private static final String JAXP_SCHEMA_LANGUAGE = "http://java.sun.com/xml/jaxp/properties/schemaLanguage";
    private static final String W3C_XML_SCHEMA = "http://www.w3.org/2001/XMLSchema"; 
    private static final String JAXP_SCHEMA_SOURCE = "http://java.sun.com/xml/jaxp/properties/schemaSource";
    
    /**
    * 
    * @param propertyFileLocation
    * @throws PropertyFileNotFoundException 
    */
    public void loadProperties(String propertyFileLocation) throws PropertyFileNotFoundException
    {
        log.info("------------------------------------------");
        log.info("Loading Properties File via SAX Commencing");
	log.info("------------------------------------------");
	
        /*
        use an instance of ourselves as sax event handler;
        */
        DefaultHandler handler = this;
        
        try{
            //get an instance of the SAXParserFactory
            SAXParserFactory factory = SAXParserFactory.newInstance();
            factory.setNamespaceAware(true);
            
            //validation only should be use when the xml file is small.
            /*
            for more info:Using Validating parser: http://docs.oracle.com/javaee/1.4/tutorial/doc/JAXPSAX9.html
            */
            factory.setValidating(true);
            
            buffer = new StringBuffer();
            
            //Get the parser
            SAXParser saxParser = factory.newSAXParser();
            saxParser.setProperty(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);
            saxParser.setProperty(JAXP_SCHEMA_SOURCE,new File(propertyFileLocation
                    +"ApplicationProperties.xsd"));
            
            File file = new File(propertyFileLocation+"application.properties.xml");
            InputStream inputstream = new FileInputStream(file);
            Reader reader = new InputStreamReader(inputstream,"UTF-8");
            
            InputSource is = new InputSource(reader);
            is.setEncoding("UTF-8");
            saxParser.parse(is, handler);
            System.out.println("End of loading property");
            
        }catch(SAXParseException spe){
            //Error generated by the parser
            // Error generated by the parser
            log.info("\n** Parsing error"
			+ ", line " + spe.getLineNumber()
			+ ", uri " + spe.getSystemId());
            log.info("   " + spe.getMessage() );

            // Use the contained exception, if any
            Exception  x = spe;
            if (spe.getException() != null) {
                	x = spe.getException();
            }
            log.error (x);

            
        } catch (ParserConfigurationException pce) {
            log.error(pce);
        } catch (SAXException sxe) {
            /*Error generated by this application
             (or a parser-initialization error)
            */
            Exception  x = sxe;
            if (sxe.getException() != null){
		x = sxe.getException();
            }				
            log.error (x);
            
        } catch (UnsupportedEncodingException uee) {
            log.error(uee);
        } catch (FileNotFoundException fne) {
            log.error(fne);
        } catch (IOException ioc) {
            log.error(ioc);
        }
        
        
        log.info("------------------------------------------");
	log.info("Loading Properties File via SAX Completed");
	log.info("------------------------------------------");
        
    }//end load properties
    
	
	//===========================================================
	// SAX DocumentHandler methods
	//===========================================================
    
    /**
     * 
     * @param url
     * @param localName
     * @param qName
     * @param attrib
     * @throws SAXException 
     */
    @Override
    public void startElement(String uri,String localName,String qName,Attributes attrib)
            throws SAXException
    {
        //reseet StringBuffer length to 0 to restart
        buffer.setLength(0);
        
        if(qName.equals("applicationproperties"))
        {
            log.debug("\t<applicationproperties> tag encoutered");
            
            //create the Property class
            properties = new Properties();
            
        }
    }//end startElement
    
    /**
     * 
     * @param uri
     * @param localName
     * @param qName
     * @throws SAXException 
     */
    @Override
    public void endElement(String uri, String localName, String qName)
            throws SAXException
    {
        /***********************/
        /* jdbc child tags */
	/***********************/
	if(qName.equals( "url")) {
				String url = buffer.toString().trim() ;
				log.debug ("\t\t\t<url>: " + url);
				properties.setProperty("jdbc.url", url);
		 }

		 if(qName.equals( "user")) {
				String user = buffer.toString().trim() ;
				log.debug ("\t\t\t<user>: " + user);
				properties.setProperty("jdbc.user", user);
		 }

		 if(qName.equals( "password")) {
				String password = buffer.toString().trim() ;
				log.debug ("\t\t\t<password>: " + password);
				properties.setProperty("jdbc.password", password);
		 }

		 /********************/
		 /* service child tags */
		 /********************/
		 if(qName.equals( "interface")) {
			 interfaceClass = buffer.toString().trim() ;
			 log.debug ("\t\t\t\t<interface>: '" + interfaceClass + "'");
		 }

		 if(qName.equals( "implementation")) {
			 implementationClass = buffer.toString().trim() ;
 			log.debug ("\t\t\t\t<implementation>: " + implementationClass);
		 }
			
		 //end of stmt, add it to dbUnit hashmap
		 if(qName.equals( "service")) {
	 		log.debug ("\t\t\t<service> end tag encountered");
				properties.setProperty(interfaceClass, implementationClass);
   }

		 //end of database
		 if(qName.equals( "servicemapping")) {
		 	log.debug ("\t\t</servicemapping> end tag encountered");
		 }
		 
			//reached end of XML file.
		 if(qName.equals( "applicationproperties")) {
				log.debug ("</applicationproperties> end tag encountered");
 			log.info ("Property File after SAX Parsing : \n" + properties.toString());			
		 }
		 buffer.setLength(0);
 }//end endElement

    
   
                /**
		* This method is invoked with the element content is encountered.
		* Here element content is what extracted and stored in the buffer. 
		*/
	@Override
	public void characters(char[] ch, int start, int length) throws SAXException
	{
 		buffer.append( ch, start, length);
	}

    
    //===========================================================
    // SAX ErrorHandler methods
    //===========================================================

    // treat validation errors as fatal
    @Override
    public void error(SAXParseException e)
    throws SAXParseException
    {
	throw e;
    }
    
    // dump warnings too
	@Override
	public void warning(SAXParseException err) throws SAXParseException
	{
			log.info("** Warning"
							+ ", line " + err.getLineNumber()
							+ ", uri " + err.getSystemId());
			log.info("   " + err.getMessage());
	}
	
	/**
	* This methods returns the Value for the passed key.
	* 
	* @param key - key whose value needs to be returned
	* @return String - value for the passed key
	*/
	static public String getPropertyValue (String key)
	{
 		return properties.getProperty(key);
	}
	
    
}
